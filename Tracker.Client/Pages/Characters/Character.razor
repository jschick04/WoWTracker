@page "/character/{id:int}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (CharacterState.Value.Selected is null)
{
    <LoadingText />
}
else if (CharacterState.Value.HasCurrentErrors && CharacterState.Value.Selected.Id != Id)
{
    <div>@CharacterState.Value.CurrentErrorMessage</div>
}
else
{
    <div class="page-header">
        <div class="character-info">
            <div class="character-name">@CharacterState.Value.Selected.Name</div>
            <div class="character-class">@CharacterState.Value.Selected.Class</div>
        </div>
        <div class="character-buttons">
            <button class="btn accent-btn" @onclick="UpdateDialog">Edit</button>
            <button class="btn cancel-btn" @onclick="DeleteDialogAsync">Delete</button>
        </div>
    </div>

    <hr />

    <div class="profession-header">
        @if (string.IsNullOrWhiteSpace(CharacterState.Value.Selected.FirstProfession))
        {
            <div class="profession-slot-1">No Primary Profession</div>
        }
        else
        {
            <div class="profession-slot-1">@CharacterState.Value.Selected.FirstProfession</div>
        }

        @if (CharacterState.Value.Selected.HasCooking)
        {
            <div class="profession-slot-2">Cooking</div>
        }
        else
        {
            <div></div>
        }

        @if (string.IsNullOrWhiteSpace(CharacterState.Value.Selected.SecondProfession))
        {
            <div class="profession-slot-3">No Secondary Profession</div>
        }
        else
        {
            <div class="profession-slot-3">@CharacterState.Value.Selected.SecondProfession</div>
        }
    </div>

    <hr />

    <div>

        <div>Needed Items <i class="fa-regular fa-plus" @onclick="AddNeededItemDialog"></i></div>

        @if (NeededItemState.Value.IsLoading)
        {
            <LoadingText />
        }
        else if (NeededItemState.Value.HasCurrentErrors)
        {
            <div>@NeededItemState.Value.CurrentErrorMessage</div>
        }
        else if (NeededItemState.Value.Items?.Any() is true)
        {
            <div>
                @foreach (var item in NeededItemState.Value.Items)
                {
                    // TODO: Add a X button and highlight red on mouseover to indicate Removal
                    <div @onclick="() => RemoveNeededItemDialogAsync(item.Profession, item.Name)">@item.Amount - @item.Name</div>
                }
            </div>
        }

        <hr />

        <div>Items to Craft</div>

        @if (_itemsToCraft.Count > 0)
        {
            <div>
                @foreach (var item in _itemsToCraft)
                {
                    <div>@item.Amount - @item.Name - @item.CharacterName</div>
                }
            </div>
        }

        <hr />

        <div>Materials Required</div>

        <div>
            @*Maybe create a separate page for a shopping list that combines all characters and who needs it*@
            <div>200 - Hide</div>
            <div>50 - Cloth</div>
        </div>

    </div>
}